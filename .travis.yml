language: python
python:
   - "2.7"
before_install:
   # Get the tag if it wasn't provided. Travis doesn't provide this if it isn't a tagged build.
   - if [ -z $TRAVIS_TAG ]; then TRAVIS_TAG=`git tag --contains` ; fi
   - echo $TRAVIS_TAG
   # Move out of git directory to build root.
   - deactivate
   - cd ../..
   - pwd
install:
   # Download and configure conda.
   - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
   - bash miniconda.sh -b -p $HOME/miniconda
   - export PATH="$HOME/miniconda/bin:$PATH"
   - conda config --set always_yes yes
   - conda config --set show_channel_urls True
   - conda config --add channels jakirkham
   - source activate root
   # Install basic conda dependencies.
   - touch $HOME/miniconda/conda-meta/pinned
   - echo "conda-build ==1.16.0" >> $HOME/miniconda/conda-meta/pinned
   - conda update --all
   - conda install conda-build
   # Build the conda package for nanshe.
   - cd $TRAVIS_REPO_SLUG
   - VERSION=`python setup.py --version`
   - echo $VERSION
   - python setup.py bdist_conda
   # Setup environment for nanshe and install it with all dependencies.
   - conda create --use-local -n nanshenv python=$TRAVIS_PYTHON_VERSION nanshe==$VERSION
   - source activate nanshenv
   # Install DRMAA with Python support.
   - .travis_scripts/install_sge.sh
   - export SGE_ROOT=/var/lib/gridengine
   - export SGE_CELL=default
   - export DRMAA_LIBRARY_PATH=/usr/lib/libdrmaa.so.1.0
   - conda install drmaa
   # Install sphinx 1.3 and friends to build documentation.
   - conda install "sphinx>=1.3,<2"
   - conda install cloud_sptheme
   # Install coverage and coveralls to generate and submit test coverage results for coveralls.io.
   # Also, install docstring-coverage to get information about documentation coverage.
   - conda install nose-timer
   - conda install coverage
   - conda install docstring-coverage
   - conda install python-coveralls
   # Clean up downloads as there are quite a few and they waste space/memory.
   - sudo apt-get clean
   - conda clean -tipsy
   - rm -rfv $HOME/.cache/pip
script:
   # Run tests. Skip 3D tests as they take too long (~1hr).
   - python setup.py nosetests --with-timer
   # Build documentation.
   - python setup.py build_sphinx
   # Get info on docstring coverage.
   - docstring-coverage nanshe | tee .docstring-coverage
after_success:
   # Submit results to coveralls.io.
   - coveralls
   # Check to see if this is the right branch to build documentation from.
   - if [ $TRAVIS_PULL_REQUEST != "false" ] || [ $TRAVIS_REPO_SLUG != "jakirkham/nanshe" ] || [ $TRAVIS_BRANCH != "master" ]; then exit 0 ; fi
   # Save documentation and documentation coverage statistics.
   - mv build/sphinx/html ../nanshe-git-docs
   - mv .docstring-coverage ../nanshe-git-docs
   # Update credentials
   - git config --global user.name "Travis CI"
   - git config --global user.email "noreply@travis-ci.org"
   # Get current pages. Unfortunately, `git fetch` does not work here.
   - git remote set-url origin "https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}"
   - git checkout --orphan gh-pages
   - git pull origin gh-pages
   - git branch -v
   # Save important git files.
   - mv .git ../nanshe-git-docs/
   - mv .nojekyll ../nanshe-git-docs/
   # Replace old documentation with new documentation.
   - rm -rf * .*
   - mv ../nanshe-git-docs/.nojekyll .
   - mv ../nanshe-git-docs/.git .
   - mv ../nanshe-git-docs/.docstring-coverage .
   - mv ../nanshe-git-docs/* .
   - rm -rf ../nanshe-git-docs
   # Commit changes and push. Reference commit used and tag if relevant.
   - git add -A
   - if [ -z $TRAVIS_TAG ]; then git commit -m "Rebuilt documentation for commit (${TRAVIS_COMMIT})." --allow-empty ; else git commit -m "Rebuilt documentation for commit (${TRAVIS_COMMIT}) and tag (${TRAVIS_TAG})." --allow-empty ; fi
   - git push -q origin gh-pages > /dev/null 2>&1; echo $?
   # Check to see if this is a release. If so, create and upload binaries.
   - if [ -z $TRAVIS_TAG ]; then exit 0 ; fi
   - git checkout $TRAVIS_TAG
   - source activate root
   - conda install anaconda-client
   - cd $HOME/miniconda/conda-bld/
   - conda convert -p osx-64 linux-64/nanshe*
   - conda server -t ${AS_TOKEN} upload linux-64/nanshe*
   - conda server -t ${AS_TOKEN} upload osx-64/nanshe*
   - curl -H "Content-Type: application/json" --data '&#123;"docker_tag_name": "latest"&#125;' -X POST "https://registry.hub.docker.com/u/jakirkham/nanshe/trigger/${DH_TOKEN}/"
notifications:
  email: False
  webhooks: https://api.kato.im/rooms/a17f510ab0bcfd79de90a2f2887718bb86afdb4fcff8b4b87965b2bdf0c40ed/travis
# Use container format for TravisCI to avoid termination due to insufficient resources.
#sudo: false
